<?php

/**
 * @file
 * Provides printer friendly content entities.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Template\Attribute;
use Drupal\entity\Entity\EntityDisplay;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;

// Register autoloading of vendor libraries.
$autoload = __DIR__ . '/vendor/autoload.php';
if (file_exists($autoload)) {
  require_once $autoload;
}

/**
 * Implements hook_permission().
 */
function printable_permission() {
  return array(
    'view printer friendly versions' => array(
      'title' => t('View Printer Friendly Versions'),
    ),
    'administer printable' => array(
      'title' => t('Administer Printable'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function printable_theme() {
  $module_path = drupal_get_path('module', 'printable');
    
  return array(
    'printable_navigation' => array(
      'variables' => array('printable_link' => NULL),
    ),
    'printable' => array(
      'template' => 'printable',
      'pattern' => 'printable__',
      'variables' => array(
        'header' => NULL,
        'content' => NULL,
        'footer' => NULL,
      ),
      'path' => $module_path . '/templates',
    ),
    'printable_header' => array(
      'template' => 'printable-header',
      'pattern' => 'printable_header__',
      'variables' => array(
        'logo_url' => NULL,
      ),
      'path' => $module_path . '/templates',
    ),
    'printable_footer' => array(
      'template' => 'printable-footer',
      'pattern' => 'printable_footer__',
      'variables' => array(
        'footer_content' => NULL,
      ),
      'path' => $module_path . '/templates',
    ),
  );
}

/**
 * Preprocess variables for list of printable printer friendly page.
 *
 * @param array $variables
 *   An associative array containing:
 *   - items: Array of participant names.
 */
function template_preprocess_printable(&$variables) {
  global $base_url;
  $config = \Drupal::config('printable.settings');

  $variables['base_url'] = $base_url . '/' . drupal_get_path('module', 'printable');
  
  $request = \Drupal::request();
  if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
    $variables['title'] = \Drupal::service('title_resolver')->getTitle($request, $route);
  }

  // @todo Uncommented code without '@todo' gets old. Either remove or add '@todo'.
  // Use this to render block in twig template, uncomment when need to test.
  /*$block = \Drupal\block\Entity\Block::load('printablelinksblockcontent');
  $variables['block_output'] = \Drupal::entityManager()
  ->getViewBuilder('block')
  ->view($block);*/
  // Trying this to render views in template, uncomment when need to test.
  // $variables['view_output'] = views_embed_view("comments_recent");

  // HTML element attributes.
  $language_interface = \Drupal::languageManager()->getCurrentLanguage();
  $variables['html_attributes'] = new Attribute(array(
    'lang' => $language_interface->getId(),
    'dir' => $language_interface->getDirection(),
  ));

  if ($config->get('send_to_printer')) {
    // @todo make this automate.
    $variables['jquery_url'] = $base_url . '/core/assets/vendor/jquery/jquery.js';
    $variables['send_script'] = 'printable/js/script.js';
    if ($config->get('close_window')) {
      $variables['close_script'] = 'printable/js/close.js';
    }  
  }
}

/**
 * Preprocess variables for list of printable printer friendly page.
 *
 * @param array $variables
 *   An associative array containing:
 *   - items: Array of participant names.
 */
function template_preprocess_printable_footer(&$variables) {
  global $base_url;
  // Create source url over here.
  // @todo Add an example URL here or the format of the URL. It will help reading the process below.
  $source_url = $base_url. \Drupal::service('path.current')->getPath();
  $pos = strpos($source_url, "printable");
  // @todo Replace the 'magic number' 11 below. For example by strlen('printable') + 2. Or (better?) use explode() + implode() to rebuild the URL.
  $pos_node = strpos($source_url, '/', $pos + 11);
  $source_url = substr($source_url, 0, $pos) . substr($source_url, $pos_node+1);
  $variables['source_url'] = $source_url;
  $links = $variables['footer_content'];
  $split_links = explode(',', $links);
  $newArray = array_unique($split_links);
  $variables['footer_links'] = $newArray;
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function printable_entity_view_mode_info_alter(&$view_modes) {
  $printable_manager = \Drupal::service('printable.entity_manager');
  foreach ($printable_manager->getPrintableEntities() as $entity_type => $entity_definition) {
    // Add an additional view mode to this entity.
    $view_modes[$entity_type]['printable'] = array(
      'label' => t('Printable'),
      'custom_settings' => FALSE,
      'cache' => TRUE,
    );
  }
}

/**
 * Implements hook_entity_view().
 */
function printable_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  // Load the printable manager and check if a printable is available for this
  // entity.
  $printable_manager = \Drupal::service('printable.entity_manager');
  $link_builder = \Drupal::service('printable.link_builder');
  if ($printable_manager->isPrintableEntity($entity)) {
    $printable_navigation = array(
      '#theme' => 'links__entity__printable',
      '#links' => $link_builder->buildLinks($entity),
      '#attributes' => array(
      // @todo Change this class name.
        'class' => array('tryhere'),
        ),
      );

    // Add the built links to the entity being rendered.
    $build['printable_navigation'] = array(
      // @todo Don't use 'b' tag, use 'strong'.
      '#markup' => '<b class="node_view">' .drupal_render($printable_navigation). '<b>',
      '#attached' => array(
        'library' => 'printable/entity-links',
       ),
      '#weight' => 100,
      '#cache' => [
      'tags' => $entity->getEntityType()->getListCacheTags(),
      ],
    );
  }
}
